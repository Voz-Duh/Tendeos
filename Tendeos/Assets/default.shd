#if OPENGL
	#define SV_POSITION POSITION
	#define VS_SHADERMODEL vs_3_0
	#define PS_SHADERMODEL ps_3_0
#else
	#define VS_SHADERMODEL vs_4_0_level_9_1
	#define PS_SHADERMODEL ps_4_0_level_9_1
#endif

matrix World;
matrix View;
matrix Projection;

struct VertexShaderInput
{
	float4 Position : SV_POSITION;
	float4 Color : COLOR0;
	float4 ScaleXY_OffsetZW : NORMAL0;
	float2 TextureCoordinates : TEXCOORD0;
	float4 WorldPositionXY_SinCosZW : TEXCOORD1;
};

struct VertexShaderOutput
{
	float4 Position : SV_POSITION;
	float4 Color : COLOR0;
	float4 ScaleXY_OffsetZW : NORMAL0;
	float2 TextureCoordinates : TEXCOORD0;
	float4 WorldPositionXY_SinCosZW : TEXCOORD1;
};

Texture2D SpriteTexture;

sampler2D SpriteTextureSampler = sampler_state
{
	Texture = <SpriteTexture>;
};

VertexShaderOutput MainVS(VertexShaderInput input)
{
    VertexShaderOutput output = (VertexShaderOutput)0;
    
    float c = input.WorldPositionXY_SinCosZW.w;
    float s = input.WorldPositionXY_SinCosZW.z;
    input.Position.xy += input.ScaleXY_OffsetZW.zw;
	input.Position.xy *= input.ScaleXY_OffsetZW.xy;
    output.Position = mul(mul(mul(float4(input.WorldPositionXY_SinCosZW.xy + float2(
        input.Position.x * c + input.Position.y * -s,
        input.Position.x * s + input.Position.y * c), 0, 1), World), View), Projection);

    output.TextureCoordinates = input.TextureCoordinates;
    output.Color = input.Color;

    return output;
}

float4 MainPS(VertexShaderOutput input) : COLOR
{
    return tex2D(SpriteTextureSampler, input.TextureCoordinates) * input.Color;
}

technique SpriteDrawing
{
	pass P0
	{
		PixelShader = compile PS_SHADERMODEL MainPS();
		VertexShader = compile VS_SHADERMODEL MainVS();
	}
};